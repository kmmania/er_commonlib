// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisCache is a mock of RedisCache interface.
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache.
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance.
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisCache) Delete(ctx context.Context, key string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisCacheMockRecorder) Delete(ctx, key, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisCache)(nil).Delete), ctx, key, timeout)
}

// Get mocks base method.
func (m *MockRedisCache) Get(ctx context.Context, key string, dest interface{}, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisCacheMockRecorder) Get(ctx, key, dest, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), ctx, key, dest, timeout)
}

// Set mocks base method.
func (m *MockRedisCache) Set(ctx context.Context, key string, value interface{}, ttl, timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, key, value, ttl, timeout)
}

// Set indicates an expected call of Set.
func (mr *MockRedisCacheMockRecorder) Set(ctx, key, value, ttl, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), ctx, key, value, ttl, timeout)
}
